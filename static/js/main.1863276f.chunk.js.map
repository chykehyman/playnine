{"version":3,"sources":["components/Stars.js","components/Button.js","components/Answer.js","components/Numbers.js","components/GameMessageFrame.js","helper/possibleCombinationSum.js","components/Game.js","components/HowToPlay.js","components/App.js","index.js"],"names":["Stars","_ref","randomNumberOfStars","react_default","a","createElement","className","_","range","map","number","i","key","Button","button","selectedNumbers","isAnswerCorrect","onAnswerSubmit","storeUsedNumbers","reDrawRandomStars","numberOfRedrawsLeft","gameStatusMessage","onClick","disabled","length","renderCheckAnswerButton","Answer","onNumberRemoved","selectedNumber","Numbers","usedNumbers","onNumberSelected","arrayOfNumbers","includes","setClassName","GameMessageFrame","resetGame","possibleCombinationSum","arr","n","indexOf","pop","listSize","combinationsCount","combinationSum","j","Game","state","initialState","_this","setState","prevState","concat","removedNumber","filter","reduce","b","generateRandomNumber","updateGameStatus","possibleSolutions","possibleNumbers","_this$state","this","components_Stars","components_Button","components_Answer","components_GameMessageFrame","components_Numbers","Component","Math","floor","random","HowToPLay","App","components_Game","HowToPlay","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.1863276f.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nconst Stars = ({randomNumberOfStars}) => {\n\n  return (\n    <div className=\"col-5\">\n      {_.range(randomNumberOfStars).map((number, i) =>\n        <i key={i} className=\"fa fa-star\"></i>\n      )}\n    </div>\n   );\n}\n\nexport default Stars;\n","import React from 'react';\n\nconst Button = ({ selectedNumbers, isAnswerCorrect, onAnswerSubmit, storeUsedNumbers, reDrawRandomStars, numberOfRedrawsLeft, gameStatusMessage }) => {\n  let button;\n  const renderCheckAnswerButton = () => {\n    switch (isAnswerCorrect) {\n      case true:\n        button = <button\n            className=\"btn btn-success confirm-answer\"\n            onClick={storeUsedNumbers}>\n            <i className=\"fa fa-check\"></i>\n          </button>\n        break;\n      case false:\n        button = <button\n            className=\"btn btn-danger confirm-answer\">\n            <i className=\"fa fa-times\"></i>\n          </button>\n        break;\n      default:\n        button =  <button\n            className=\"btn btn-primary confirm-answer\"\n            onClick={onAnswerSubmit}\n            disabled={selectedNumbers.length === 0}> <em className=\"confirm-answer-value\">=</em>\n          </button>\n        break;\n    }\n    return button;\n  }\n\n  const renderRefreshButton = () => (\n    <button\n        className=\"btn btn-sm btn-warning\"\n        onClick={reDrawRandomStars}\n        disabled={gameStatusMessage || numberOfRedrawsLeft === 0}>\n        <i className=\"fa fa-refresh\"> {numberOfRedrawsLeft}</i>\n      </button>\n  );\n\n  return (\n    <div className=\"col-2 button-container\">\n      {renderCheckAnswerButton()}\n      {renderRefreshButton()}\n    </div>\n   );\n}\n\nexport default Button;\n","import React from 'react';\n\nconst Answer = ({ selectedNumbers, onNumberRemoved }) => {\n  return (\n    <div className=\"col-5 answer-container\">\n      {selectedNumbers.length > 0 &&\n        selectedNumbers.map((selectedNumber, key) =>\n          <span key={key} onClick={() => onNumberRemoved(selectedNumber)}>\n            {selectedNumber}\n          </span>\n      )}\n    </div>\n   );\n}\n\nexport default Answer;\n","import React from 'react';\nimport _ from 'lodash';\n\nconst Numbers = ({selectedNumbers, usedNumbers, onNumberSelected}) => {\n  const arrayOfNumbers = _.range(1, 10);\n\n  const setClassName = (number) => {\n    if (selectedNumbers.includes(number)) {\n      return 'selected';\n    }\n\n    if (usedNumbers.includes(number)) {\n      return 'used'\n    }\n  }\n  return (\n    <div className=\"card text-center\">\n      <div>\n        {arrayOfNumbers.map((number, i) =>\n          <span\n            key={i}\n            className={setClassName(number)}\n            onClick={() => onNumberSelected(number)}>\n            {number}\n          </span>\n        )}\n      </div>\n    </div>\n   );\n}\n\nexport default Numbers;\n","import React from 'react';\n\nconst GameMessageFrame = ({gameStatusMessage, resetGame}) => {\n  return (\n    <div className=\"text-center\">\n      <h2>{gameStatusMessage}</h2>\n      <button\n        onClick={resetGame}\n        className=\"btn btn-outline-secondary btn-sm\">Play Again\n      </button>\n    </div>\n   );\n}\n\nexport default GameMessageFrame;\n","const possibleCombinationSum = (arr, n) => {\n  if (arr.indexOf(n) >= 0) { return true; }\n  if (arr[0] > n) { return false; }\n  if (arr[arr.length - 1] > n) {\n    arr.pop();\n    return possibleCombinationSum(arr, n);\n  }\n  const listSize = arr.length, combinationsCount = (1 << listSize)\n  for (let i = 1; i < combinationsCount ; i++ ) {\n    let combinationSum = 0;\n    for (let j=0 ; j < listSize ; j++) {\n      if (i & (1 << j)) { combinationSum += arr[j]; }\n    }\n    if (n === combinationSum) { return true; }\n  }\n  return false;\n};\n\nexport default possibleCombinationSum;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\n\n\nimport Stars from './Stars';\nimport Button from './Button';\nimport Answer from './Answer';\nimport Numbers from './Numbers';\nimport GameMessageFrame from './GameMessageFrame';\n\nimport possibleCombinationSum from '../helper/possibleCombinationSum';\n\nclass Game extends Component {\n  static generateRandomNumber = () => Math.floor((Math.random() * 9) + 1);\n  static initialState = () => ({\n    selectedNumbers: [],\n    usedNumbers: [],\n    randomNumberOfStars: Game.generateRandomNumber(),\n    isAnswerCorrect: null,\n    numberOfRedrawsLeft: 5,\n    gameStatusMessage: null\n  })\n  state = Game.initialState();\n\n  onNumberSelected = (selectedNumber) => {\n    if (this.state.usedNumbers.includes(selectedNumber)) return;\n    if (!this.state.selectedNumbers.includes(selectedNumber)) {\n      this.setState(prevState => ({\n        isAnswerCorrect: null,\n        selectedNumbers: prevState.selectedNumbers.concat(selectedNumber)\n      }));\n    }\n  }\n\n  onNumberRemoved = (removedNumber) => {\n      this.setState(prevState => ({\n        isAnswerCorrect: null,\n        selectedNumbers: prevState.selectedNumbers\n          .filter(number => number !== removedNumber)\n      }));\n  }\n\n  onAnswerSubmit = () => {\n    this.setState(prevState => ({\n      isAnswerCorrect: prevState.randomNumberOfStars ===\n        prevState.selectedNumbers.reduce((a, b) => a + b, 0)\n    }))\n  }\n\n  storeUsedNumbers = () => {\n    this.setState(prevState => ({\n      usedNumbers: prevState.usedNumbers.concat(prevState.selectedNumbers),\n      selectedNumbers: [],\n      isAnswerCorrect: null,\n      randomNumberOfStars: Game.generateRandomNumber()\n    }), this.updateGameStatus);\n  }\n\n  reDrawRandomStars = () => {\n    if (this.state.numberOfRedrawsLeft > 0) {\n      this.setState(prevState => ({\n        randomNumberOfStars: Game.generateRandomNumber(),\n        selectedNumbers: [],\n        isAnswerCorrect: null,\n        numberOfRedrawsLeft: prevState.numberOfRedrawsLeft - 1\n      }), this.updateGameStatus);\n    }\n  }\n\n  possibleSolutions = ({ randomNumberOfStars, usedNumbers }) => {\n    const possibleNumbers = _.range(1, 10).filter(number => !usedNumbers.includes(number));\n\n    return possibleCombinationSum(possibleNumbers, randomNumberOfStars)\n  }\n\n  updateGameStatus = () => {\n    this.setState(prevState => {\n      if (prevState.usedNumbers.length === 9) {\n        return { gameStatusMessage: 'Hurray. You Win!'}\n      }\n\n      if (prevState.numberOfRedrawsLeft === 0 && !this.possibleSolutions(prevState)) {\n        return { gameStatusMessage: 'Game Over!'}\n      }\n    })\n  }\n\n  resetGame = () => this.setState(Game.initialState());\n\n  render () {\n    const {\n      selectedNumbers,\n      randomNumberOfStars,\n      isAnswerCorrect,\n      usedNumbers,\n      numberOfRedrawsLeft,\n      gameStatusMessage } = this.state;\n    return (\n      <div className=\"container\">\n        <h3 className=\"header\">Play Nine</h3>\n        <hr/>\n        <div className=\"row\">\n          <Stars randomNumberOfStars={randomNumberOfStars}/>\n          <Button\n            selectedNumbers={selectedNumbers}\n            isAnswerCorrect={isAnswerCorrect}\n            onAnswerSubmit={this.onAnswerSubmit}\n            storeUsedNumbers={this.storeUsedNumbers}\n            reDrawRandomStars={this.reDrawRandomStars}\n            numberOfRedrawsLeft={numberOfRedrawsLeft}\n            gameStatusMessage={gameStatusMessage}/>\n          <Answer\n            selectedNumbers={selectedNumbers}\n            onNumberRemoved={this.onNumberRemoved}/>\n        </div>\n        <br/>\n        {!gameStatusMessage\n          ?\n            <Numbers\n              selectedNumbers={selectedNumbers}\n              usedNumbers={usedNumbers}\n              onNumberSelected={this.onNumberSelected}/>\n           :\n            <GameMessageFrame\n              gameStatusMessage={gameStatusMessage}\n              resetGame={this.resetGame}/>\n        }\n      </div>\n     );\n  }\n}\n\nexport default Game;\n","import React from 'react';\n\nconst HowToPLay = () => {\n  return (\n    <div className=\"container mt-5 pt-5 \">\n      <h3 className=\"text-center pb-0\">How To Play</h3>\n      <div className=\"game-rules\">\n        <div className=\"rules\">\n          <h5>Step One</h5>\n          <p>From the list of circled numbers provided, pick any combinations that sums up to the number of rolling stars</p>\n        </div>\n        <div className=\"rules\">\n          <h5>Step Two</h5>\n          <p>Click the blue button representing an \"equal to\" sign, to verify if you answered correctly or not. If correct, a green button with a \"check mark\" label will show else, a red button with an \"X\" label will show </p>\n        </div>\n        <div className=\"rules\">\n          <h5>Step Three</h5>\n          <p>If the green button shows, click it again to continue the game. If a red button shows, click the yellow \"refresh\" button to continue</p>\n        </div>\n        <div className=\"rules\">\n          <h5>Step Four</h5>\n          <p>If the green button shows, click it again to continue the game. If a red button shows, click the yellow \"refresh\" button to continue</p>\n        </div>\n      </div>\n    </div>\n   );\n}\n\nexport default HowToPLay;\n","import React, { Component } from 'react';\nimport Game from './Game';\nimport HowToPlay from './HowToPlay';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Game/>\n        <HowToPlay/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './styles/main.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}